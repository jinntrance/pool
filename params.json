{
  "name": "Pool",
  "tagline": "A pool Implementation for golang",
  "body": "golang-pool\r\n====\r\n\r\n## pool.go\r\n\r\npool.go is a pool implementation for golang. You may need it if you use golang with version <= 1.2 \r\n\r\nIts features include:\r\n\r\n* Network failure tolerance.\r\n* Establishing and closing connections on demand depending on the network state.\r\n\r\n# Installation\r\n\r\nJust run `go get github.com/jinntrance/pool`\r\n\r\n## Examples\r\n\r\nInitial a pool\r\n```go\r\nvar pool = Pool{\r\n        //how to create a client and then put it into the pool\r\n        New: func() (interface{}, error) {\r\n                cli, err := CreateAClient(GetAServer())\r\n                return cli, err\r\n        },\r\n        //do something when closing the client\r\n        Close: func(x interface{}) {\r\n                x.(*Client).Close()\r\n        },\r\n        PoolSize: 100, //MaxNum of clients to retain\r\n}\r\n\r\n```\r\nWhere `Client` is the type for your sepecific client.\r\nThen use the pool just created\r\n```go\r\ncli, err := pool.Get()\r\nif nil == err {\r\n        client := cli.(*Client) //get a client and convert it to a specific type\r\n        re, lastError := client.doSomething()\r\n        err = lastError //record the last error\r\n} \r\npool.Put(cli, err) // put back the client with the error. If error occurs and 'err' is not nil, 'cli' would be closed.\r\n```\r\n\r\n<script type=\"text/javascript\" src=\"http://www.josephjctang.com/assets/js/analytics.js\" async=\"async\"></script>\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}